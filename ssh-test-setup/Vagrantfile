require 'fileutils'

Vagrant.configure("2") do |config|
  # Generate the TLS certs if they don't exist yet
  if not File.directory?('tls')
    Dir.mkdir 'tls'
    Dir.mkdir 'tls/CA'
    # Generate root certificate
    system('openssl req -x509 -config /etc/ssl/openssl.cnf -new -nodes -keyout tls/CA/root.key -sha256 -days 365 -out tls/CA/root.crt -subj "/C=US/ST=NY/L=NYC/O=TEST/CN=auth.mongodb.test"')
    # Generate certificates for the replica set members
    (1..3).each do |i|
      Dir.mkdir "tls/rs#{i}"
      tmp_cnf = "[SAN]\nsubjectAltName = @altNames\n[altNames]\nDNS.1 = localhost\nDNS.2 = rs#{i}.mongodb.test\n"
      tmp_cnf_name = "ext_openssl_rs#{i}.cnf"
      File.write(tmp_cnf_name, tmp_cnf)
      system("openssl req -config /etc/ssl/openssl.cnf -new -nodes -keyout tls/rs#{i}/rs#{i}.key -out tls/rs#{i}/rs#{i}.csr -days 365 -subj \"/C=US/ST=NY/L=NYC/O=TEST/OU=Server/CN=rs#{i}.mongodb.test\"")
      system("openssl x509 -req -days 365 -sha256 -in tls/rs#{i}/rs#{i}.csr -CA tls/CA/root.crt -CAkey tls/CA/root.key -CAcreateserial -extensions SAN -extfile ext_openssl_rs#{i}.cnf -out tls/rs#{i}/rs#{i}.crt")
      system("cat tls/rs#{i}/rs#{i}.crt tls/rs#{i}/rs#{i}.key > tls/rs#{i}/rs#{i}.pem")
      File.delete(tmp_cnf_name)
    end
    Dir.mkdir 'tls/testdriver'
    tmp_cnf = "[SAN]\nsubjectAltName = @altNames\n[altNames]\nDNS.1 = localhost\nDNS.2 = testdriver.mongodb.test\n"
    File.write('ext_openssl_td.cnf', tmp_cnf)
    system('openssl req -config /etc/ssl/openssl.cnf -new -nodes -keyout tls/testdriver/testdriver.key -out tls/testdriver/testdriver.csr -days 365 -subj "/C=US/ST=NY/L=NYC/O=TEST/OU=Server/CN=testdriver.mongodb.test"')
    system('openssl x509 -req -days 365 -sha256 -in tls/testdriver/testdriver.csr -CA tls/CA/root.crt -CAkey tls/CA/root.key -CAcreateserial -out tls/testdriver/testdriver.crt')
    system('cat tls/testdriver/testdriver.crt tls/testdriver/testdriver.key > tls/testdriver/testdriver.pem')
    File.delete('ext_openssl_td.cnf')
  end

  # Regen the ssh keys used to communicate between testdriver and rs[1-3] if we're in up or provision mode
  if ARGV[0] == 'up' || ARGV[0] == 'provision'
    if File.directory?("ssh")
      FileUtils.rm_rf('ssh')
    end
    Dir.mkdir('ssh')
    system('ssh-keygen -t ed25519 -f ssh/id_ed25519 -N ""')
    insecure_ssh_pub_key = File.readlines('ssh/id_ed25519.pub').first.strip
  end
  
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  config.vm.provider "docker" do |d, override|
    d.image = "centos:7"
  end
  
  config.vm.provider "virtualbox" do |v, override|
    override.vm.box = "centos/7"
  end
  # Create a three node RS, all with the same configuration
  (1..3).each do |i|
    config.vm.define "rs-#{i}" do |node|
      node_ip = 73 + i
      node.vm.network "private_network", ip: "192.168.31.#{node_ip}"
      node.vm.hostname = "rs#{i}.mongodb.test"
      node.vm.synced_folder ".", "/vagrant", disabled: true
      node.vm.provision "hosts", :sync_hosts => true
      node.vm.provision "file",  source: "mongod-ssh-rs.conf", destination: "mongod-ssh-rs.conf"
      node.vm.provision "file",  source: "mongod-ssh-ssl.conf", destination: "mongod-ssh-ssl.conf"
      node.vm.provision "shell", inline: "[ -d /home/vagrant/tls ] || mkdir -p tls", privileged: false
      node.vm.provision "file",  source: "tls/rs#{i}/rs#{i}.pem", destination: "tls/mongo.pem"
      node.vm.provision "file",  source: "tls/CA/root.crt", destination: "tls/root.crt"
      node.vm.provision "file",  source: "init-replicaset.js", destination: "init-replicaset.js"
      node.vm.provision "file",  source: "init-replicaset-ssl.js", destination: "init-replicaset-ssl.js"
      node.vm.provision "file",  source: "create-test-user.js", destination: "create-test-user.js"
      node.vm.provision "file",  source: "start-mongod-replset-node.sh", destination: "start-mongod-replset-node.sh"
      node.vm.provision "shell", inline: 'chown vagrant:vagrant start-mongod-replset-node.sh ; chmod 700 start-mongod-replset-node.sh'
      node.vm.provision "shell", inline: "[ -d /home/vagrant/data ] || mkdir -p data", privileged: false
      node.vm.provision "shell", inline: "[ -d /home/vagrant/data-ssl ] || mkdir -p data-ssl", privileged: false
      node.vm.provision "file",  source: "test-keyfile", destination: "/home/vagrant/data/keyfile"
      node.vm.provision "file",  source: "test-keyfile", destination: "/home/vagrant/data-ssl/keyfile"
      node.vm.provision "shell", inline: "chown vagrant:vagrant /home/vagrant/data/keyfile ; chmod 600 /home/vagrant/data/keyfile"
      node.vm.provision "shell", inline: "chown vagrant:vagrant /home/vagrant/data-ssl/keyfile ; chmod 600 /home/vagrant/data-ssl/keyfile"
      node.vm.provision "file",  source: 'mongo-yum-3.6.repo', destination: 'mongodb-org-3.6.repo'
      node.vm.provision "shell", inline: "[ -d /etc/yum/repos.d ] || sudo mkdir -p /etc/yum/repos.d"
      node.vm.provision "shell", inline: "sudo mv /home/vagrant/mongodb-org-3.6.repo /etc/yum/repos.d/"
      node.vm.provision "shell", inline: 'sudo yum install -y mongodb-org vim'
      node.vm.provision "shell", inline: <<-SSHD_CONFIG
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        systemctl restart sshd.service
      SSHD_CONFIG
      node.vm.provision "shell", inline: "[ -d /home/vagrant/.ssh/ ] || mkdir /home/vagrant/.ssh", privileged: false
      node.vm.provision "shell", inline: "echo #{insecure_ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys", privileged: false
      node.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--cpus", "1", "--memory", "1024"]
      end
      node.vm.provision "shell", inline: '$HOME/start-mongod-replset-node.sh', privileged: false
    end
  end

  config.vm.define :testdriver do |tester|
    tester.vm.network :private_network, ip: "192.168.31.98"
    tester.vm.hostname = "testdriver.mongodb.test"
    tester.vm.provision "shell", inline: "[ -d /home/vagrant/tls ] || mkdir -p tls", privileged: false
    tester.vm.provision "file",  source: "tls/testdriver/testdriver.pem", destination: "tls/testdriver.pem"
    tester.vm.provision "file",  source: "tls/CA/root.crt",    destination: "tls/root.crt"
    #tester.vm.provision "file",  source: "init-replicaset.js", destination: "init-replicaset.js"
    tester.vm.provision "file",  source: "config-timeouts.js", destination: "config-timeouts.js"
    tester.vm.provision "file",  source: "setup-test-env.sh",  destination: "setup-test-env.sh"
    tester.vm.provision "shell", inline: 'sudo yum install -y java-11-openjdk git emacs-nox wget tmux epel-release'
    tester.vm.provision 'shell', inline: 'sudo yum install -y python-pip python-devel'
    tester.vm.provision "shell", inline: "sudo pip install mtools==1.5.3 psutil pymongo"
    tester.vm.provision 'shell', inline: <<-LEIN_INSTALL
    if [ ! -d /home/vagrant/bin ]; then
      mkdir -p /home/vagrant/bin
    fi
    if [ ! -f /home/vagrant/bin/lein ]; then
      wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein -O /home/vagrant/bin/lein
      chown vagrant:vagrant /home/vagrant/bin/lein
      chmod a+x /home/vagrant/bin/lein
    fi
    LEIN_INSTALL
    tester.vm.provision "shell", inline: "[ -d /etc/yum/repos.d ] || sudo mkdir -p /etc/yum/repos.d"
    tester.vm.provision "file",  source: 'mongo-yum-3.6.repo', destination: 'mongodb-org-3.6.repo'
    tester.vm.provision "shell", inline: "sudo mv /home/vagrant/mongodb-org-3.6.repo /etc/yum/repos.d/"
    tester.vm.provision "shell", inline: 'sudo yum install -y mongodb-org vim'
    tester.vm.provision "shell", inline: "mkdir -p git-repo/mdb-runtime-tester"
    tester.vm.provision "hosts", :sync_hosts => true
    tester.vm.provision "shell", inline: "[ -d /home/vagrant/.ssh ] || mkdir /home/vagrant/.ssh", privileged: false
    tester.vm.provision "file",  source: 'ssh/id_ed25519', destination: '.ssh/id_ed25519'
    tester.vm.provision "file",  source: 'ssh/id_ed25519.pub', destination: '.ssh/id_ed25519.pub'
    tester.vm.synced_folder ".", "/vagrant", disabled: true
    tester.vm.synced_folder "../../mdb-runtime-tester/", "/home/vagrant/git-repo/mdb-runtime-tester"
    tester.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--cpus", "2", "--memory", "3096"]
    end
    tester.vm.provision 'shell', inline: '[ -d /home/vagrant/tmp/mdb-test ] || /home/vagrant/setup-test-env.sh', privileged: false
  end

  config.vm.define "rs-3" do |rs_node|
    rs_node.vm.provision 'shell', inline: 'mongo mongodb://localhost:27017 init-replicaset.js', privileged: false
    rs_node.vm.provision 'shell', inline: 'mongo mongodb://localhost:28017 --ssl --sslCAFile tls/root.crt init-replicaset-ssl.js', privileged: false
    rs_node.vm.provision 'shell', inline: 'mongo mongodb://localhost:27017/admin?replicaSet=replTest create-test-user.js', privileged: false
    rs_node.vm.provision 'shell', inline: 'mongo mongodb://localhost:28017/admin?replicaSet=replTestTLS --ssl --sslCAFile tls/root.crt create-test-user.js', privileged: false
  end

end
